package copsassistant;

import plugininterface.Plugin;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

public class COPSAssistant extends javax.swing.JFrame {

    private DefaultListModel pluginModel;
    private final File currentDir = new File(System.getProperty("user.dir"));

    public COPSAssistant() throws Throwable {
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        initComponents();
        ArrayList<Plugin> _pluginList = CreatePluginList();
        CreateDisplay(_pluginList);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        dialogPluginManager = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        listPlugins = new javax.swing.JList<>();
        btnAddPlugin = new javax.swing.JButton();
        btnDeletePlugin = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        dialogAddPlugin = new javax.swing.JDialog();
        txtPluginName = new javax.swing.JTextField();
        lblPackage = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        btnFindPlugin = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuItemClose = new javax.swing.JMenuItem();
        menuPlugin = new javax.swing.JMenu();
        menuItemAddPlugin = new javax.swing.JMenuItem();
        menuItemReload = new javax.swing.JMenuItem();

        jFileChooser.setCurrentDirectory(currentDir);

        dialogPluginManager.setModal(true);

        jScrollPane1.setViewportView(listPlugins);

        btnAddPlugin.setText("Add Plugin");
        btnAddPlugin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPluginActionPerformed(evt);
            }
        });

        btnDeletePlugin.setText("Delete Plugin");
        btnDeletePlugin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePluginActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogPluginManagerLayout = new javax.swing.GroupLayout(dialogPluginManager.getContentPane());
        dialogPluginManager.getContentPane().setLayout(dialogPluginManagerLayout);
        dialogPluginManagerLayout.setHorizontalGroup(
            dialogPluginManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPluginManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogPluginManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(dialogPluginManagerLayout.createSequentialGroup()
                        .addComponent(btnAddPlugin)
                        .addGap(77, 77, 77)
                        .addComponent(btnDeletePlugin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        dialogPluginManagerLayout.setVerticalGroup(
            dialogPluginManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogPluginManagerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(dialogPluginManagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddPlugin)
                    .addComponent(btnDeletePlugin)
                    .addComponent(btnClose))
                .addContainerGap())
        );

        dialogAddPlugin.setModal(true);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnFindPlugin.setText("Find Plugin");
        btnFindPlugin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindPluginActionPerformed(evt);
            }
        });

        jLabel1.setText("Plugin Name");

        jLabel2.setText("Plugin Package");

        jLabel3.setText("Plugin Location");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogAddPluginLayout = new javax.swing.GroupLayout(dialogAddPlugin.getContentPane());
        dialogAddPlugin.getContentPane().setLayout(dialogAddPluginLayout);
        dialogAddPluginLayout.setHorizontalGroup(
            dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAddPluginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogAddPluginLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dialogAddPluginLayout.createSequentialGroup()
                                .addGap(186, 186, 186)
                                .addComponent(btnOK)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel))
                            .addGroup(dialogAddPluginLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPackage, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(btnFindPlugin, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dialogAddPluginLayout.createSequentialGroup()
                        .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2))
                        .addGap(34, 34, 34)
                        .addComponent(txtPluginName, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        dialogAddPluginLayout.setVerticalGroup(
            dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogAddPluginLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFindPlugin)
                .addGap(18, 18, 18)
                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPluginName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(lblPackage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(dialogAddPluginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addGap(31, 31, 31))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("COPS Assistant");

        menuFile.setText("File");

        menuItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuItemClose.setText("Close");
        menuFile.add(menuItemClose);

        jMenuBar1.add(menuFile);

        menuPlugin.setText("Plugin");

        menuItemAddPlugin.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAddPlugin.setText("Manage Plugins");
        menuItemAddPlugin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddPluginActionPerformed(evt);
            }
        });
        menuPlugin.add(menuItemAddPlugin);

        menuItemReload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuItemReload.setText("Reload");
        menuItemReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReloadActionPerformed(evt);
            }
        });
        menuPlugin.add(menuItemReload);

        jMenuBar1.add(menuPlugin);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemAddPluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddPluginActionPerformed

        CreateListModel();
        dialogPluginManager.pack();
        dialogPluginManager.setVisible(true);
    }//GEN-LAST:event_menuItemAddPluginActionPerformed

    private void btnAddPluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPluginActionPerformed
        dialogAddPlugin.pack();
        dialogAddPlugin.setVisible(true);
    }//GEN-LAST:event_btnAddPluginActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dialogPluginManager.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnFindPluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindPluginActionPerformed
        int returnVal = jFileChooser.showOpenDialog(dialogAddPlugin);
        String pluginFolder = "";
        String xmlFile = "";
        if (returnVal == jFileChooser.APPROVE_OPTION) {
            pluginFolder = jFileChooser.getCurrentDirectory().getAbsolutePath();
            xmlFile = jFileChooser.getSelectedFile().getName();
        }
        PopulateAddDialog(pluginFolder, xmlFile);
    }//GEN-LAST:event_btnFindPluginActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dialogAddPlugin.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        try {
            File pluginCache = new File(currentDir + "\\pluginCache.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(pluginCache);
            doc.getDocumentElement().normalize();

            Element rootElement = doc.getDocumentElement();

            Element plugin = doc.createElement("plugin");
            rootElement.appendChild(plugin);

            Element nameNode = doc.createElement("name");
            nameNode.appendChild(doc.createTextNode(txtPluginName.getText()));
            plugin.appendChild(nameNode);
            Element packageNode = doc.createElement("package");
            packageNode.appendChild(doc.createTextNode(lblPackage.getText()));
            plugin.appendChild(packageNode);
            Element locationNode = doc.createElement("location");
            locationNode.appendChild(doc.createTextNode(lblLocation.getText()));
            plugin.appendChild(locationNode);

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(pluginCache);

            transformer.transform(source, result);

            RefreshPlugins();
            CreateListModel();
            dialogAddPlugin.dispose();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void menuItemReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReloadActionPerformed
        RefreshPlugins();
    }//GEN-LAST:event_menuItemReloadActionPerformed

    private void btnDeletePluginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePluginActionPerformed
        try {
            File pluginCache = new File(currentDir + "\\pluginCache.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(pluginCache);
            doc.getDocumentElement().normalize();

            Element rootElement = doc.getDocumentElement();

            NodeList pluginNodes = rootElement.getElementsByTagName("plugin");
            for (int i = 0; i < pluginNodes.getLength(); i++) {

                Node pluginNode = pluginNodes.item(i);
                if (pluginNode.getNodeType() == Node.ELEMENT_NODE) {

                    Element eElement = (Element) pluginNode;
                    if (eElement.getElementsByTagName("name").item(0).getTextContent().equals(listPlugins.getSelectedValue())) {
                        rootElement.removeChild(pluginNode);
                    }
                }
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(pluginCache);

            transformer.transform(source, result);

            RefreshPlugins();
            CreateListModel();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }//GEN-LAST:event_btnDeletePluginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(COPSAssistant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(COPSAssistant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(COPSAssistant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(COPSAssistant.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new COPSAssistant().setVisible(true);

                } catch (Throwable ex) {
                    Logger.getLogger(COPSAssistant.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPlugin;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDeletePlugin;
    private javax.swing.JButton btnFindPlugin;
    private javax.swing.JButton btnOK;
    private javax.swing.JDialog dialogAddPlugin;
    private javax.swing.JDialog dialogPluginManager;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblPackage;
    private javax.swing.JList<String> listPlugins;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemAddPlugin;
    private javax.swing.JMenuItem menuItemClose;
    private javax.swing.JMenuItem menuItemReload;
    private javax.swing.JMenu menuPlugin;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField txtPluginName;
    // End of variables declaration//GEN-END:variables

    private void CreateListModel() {
        try {
            pluginModel = new DefaultListModel();
            NodeList pluginNodes = CreateXmlNodeList();

            for (int temp = 0; temp < pluginNodes.getLength(); temp++) {

                Node pluginNode = pluginNodes.item(temp);
                if (pluginNode.getNodeType() == Node.ELEMENT_NODE) {

                    Element eElement = (Element) pluginNode;
                    pluginModel.addElement(eElement.getElementsByTagName("name").item(0).getTextContent());
                }
            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
            System.out.println(e.getMessage());
        }
        listPlugins.setModel(pluginModel);
    }

    private void PopulateAddDialog(String fileLocation, String xmlFile) {

        try {
            File pluginCache = new File(fileLocation + "\\" + xmlFile);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(pluginCache);
            Element rootElement = doc.getDocumentElement();
            System.out.println(rootElement.getNodeName());

            txtPluginName.setText(rootElement.getElementsByTagName("name").item(0).getTextContent());
            lblPackage.setText(rootElement.getElementsByTagName("packageName").item(0).getTextContent());
            lblLocation.setText(fileLocation + "\\" + rootElement.getElementsByTagName("jarName").item(0).getTextContent());
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    private void RefreshPlugins() {
        try {
            tabbedPane.removeAll();
            ArrayList<Plugin> _pluginList = CreatePluginList();
            CreateDisplay(_pluginList);
        } catch (Exception e) {

        }
    }

    private ArrayList<Plugin> CreatePluginList() throws MalformedURLException, InstantiationException, ClassNotFoundException, IllegalAccessException {
        ArrayList<Plugin> _pluginList = new ArrayList();
        Map<String, String> pluginsFromXml = CreatePluginHashMap();
        for (Map.Entry plugin : pluginsFromXml.entrySet()) {
            File pluginJarFile = new File(plugin.getValue().toString());
            ClassLoader pluginLoader = URLClassLoader.newInstance(new URL[]{pluginJarFile.toURL()});
            Plugin currentPlugin = (Plugin) pluginLoader.loadClass(plugin.getKey().toString()).newInstance();
            currentPlugin.run();
            _pluginList.add(currentPlugin);

        }
        return _pluginList;
    }

    private Map<String, String> CreatePluginHashMap() {
        Map<String, String> pluginList = new HashMap<>();
        try {
            NodeList pluginNodes = CreateXmlNodeList();

            for (int temp = 0; temp < pluginNodes.getLength(); temp++) {

                Node pluginNode = pluginNodes.item(temp);
                if (pluginNode.getNodeType() == Node.ELEMENT_NODE) {

                    Element eElement = (Element) pluginNode;
                    pluginList.put(eElement.getElementsByTagName("package").item(0).getTextContent(), eElement.getElementsByTagName("location").item(0).getTextContent());
                }
            }
        } catch (IOException | ParserConfigurationException | DOMException | SAXException e) {
            System.out.println(e.getMessage());
        }
        return pluginList;
    }

    private NodeList CreateXmlNodeList() throws IOException, ParserConfigurationException, SAXException {
        File pluginCache = new File(currentDir + "\\pluginCache.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.parse(pluginCache);
        doc.getDocumentElement().normalize();
        NodeList pluginNodes = doc.getElementsByTagName("plugin");
        return pluginNodes;
    }

    private void CreateDisplay(ArrayList<Plugin> pluginList) {

        pluginList.forEach((plugin) -> {
            try {
                JFrame frame = plugin.run();
                tabbedPane.addTab(frame.getTitle(), frame.getContentPane());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, plugin.toString() + " is not available", "Plugin Not Found", JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}
